@startuml
skinparam linetype ortho
skinparam nodesep 70
skinparam ranksep 50

title "Activity Extension with Factory Pattern"

' Controllers
class BookingController {
  -bookingService: BookingService
  -authService: AuthService
  +getActivities(location: String, type: ActivityType): List<Activity>
  +bookActivity(activityId: String, participants: int): Booking
  +getBookings(userId: String): List<Booking>
}

class MapsController {
  -mapsService: MapsService
  -authService: AuthService
  +getLocations(query: String): List<Location>
  +getRoutes(from: String, to: String): Route
}

class AuthController {
  -authService: AuthService
  +authenticate(credentials: Object): String
  +register(userData: Object): User
}

' Services
class BookingService {
  -activityFactory: ActivityFactory
  -bookingRepository: BookingRepository
  +searchActivities(location: String, type: ActivityType): List<Activity>
  +bookActivity(activityId: String, participants: int): Booking
  +getBookings(userId: String): List<Booking>
}

class MapsService {
  -mapsRepository: MapsRepository
  +getLocations(query: String): List<Location>
  +getRoutes(from: String, to: String): Route
}

class AuthService {
  -userRepository: UserRepository
  +authenticate(credentials: Object): String
  +register(userData: Object): User
  +validateToken(token: String): boolean
}

' Factory Pattern Core
interface ActivityFactory {
  +createActivity(type: ActivityType): Activity
}

class ConcreteActivityFactory {
  +createActivity(type: ActivityType): Activity
}

' Product interface
interface Activity {
  +getId(): String
  +getName(): String
  +getLocation(): String
  +getType(): ActivityType
  +getDetails(): String
  +book(participants: int): Booking
}

' Concrete Products
class Excursie {
  -id: String
  -name: String
  -location: String
  -description: String
  -price: Double
  +getId(): String
  +getName(): String
  +getLocation(): String
  +getType(): ActivityType
  +getDetails(): String
  +book(participants: int): Booking
}

class Overnachting {
  -id: String
  -name: String
  -location: String
  -description: String
  -price: Double
  +getId(): String
  +getName(): String
  +getLocation(): String
  +getType(): ActivityType
  +getDetails(): String
  +book(participants: int): Booking
}

class Vervoer {
  -id: String
  -name: String
  -location: String
  -description: String
  -price: Double
  +getId(): String
  +getName(): String
  +getLocation(): String
  +getType(): ActivityType
  +getDetails(): String
  +book(participants: int): Booking
}

' Repositories
class BookingRepository {
  +save(booking: Booking): void
  +findById(id: String): Booking
  +findByUserId(userId: String): List<Booking>
}

class MapsRepository {
  +findLocations(query: String): List<Location>
  +findRoute(from: String, to: String): Route
}

class UserRepository {
  +save(user: User): void
  +findById(id: String): User
  +findByUsername(username: String): User
}

' Domain models
enum ActivityType {
  EXCURSIE
  OVERNACHTING
  VERVOER
}

class Activity {
  -id: String
  -name: String
  -type: ActivityType
}

class Booking {
  -id: String
  -activityId: String
  -userId: String
  -participants: int
  -date: Date
  -status: String
}

class User {
  -id: String
  -username: String
  -email: String
}

class Location {
  -id: String
  -name: String
  -coordinates: String
}

class Route {
  -from: Location
  -to: Location
  -distance: Double
}

' External Systems
class Database << External System >>
class BookingAPI << External System >>
class TripAdvisorAPI << External System >>
class GoogleMapsAPI << External System >>
class IdentityProviderAPI << External System >>

' Relationships - Controller and Services
BookingController --> BookingService
BookingController --> AuthService
MapsController --> MapsService
MapsController --> AuthService
AuthController --> AuthService

' Factory Pattern Relationships
BookingService --> ActivityFactory
ActivityFactory <|.. ConcreteActivityFactory
ConcreteActivityFactory ..> Excursie : creates
ConcreteActivityFactory ..> Overnachting : creates
ConcreteActivityFactory ..> Vervoer : creates

' Product Relationships
Activity <|.. Excursie
Activity <|.. Overnachting
Activity <|.. Vervoer

' Repository Relationships
BookingService --> BookingRepository
MapsService --> MapsRepository
AuthService --> UserRepository
BookingRepository --> Database
MapsRepository --> Database
UserRepository --> Database

' External Systems
BookingService --> BookingAPI
BookingService --> TripAdvisorAPI
MapsService --> GoogleMapsAPI
AuthService --> IdentityProviderAPI

' Domain Relationships
Activity --> ActivityType
Excursie ..> Booking : creates
Overnachting ..> Booking : creates
Vervoer ..> Booking : creates

@enduml 