@startuml

' gekozen ontwerpvraag:
' Hoe zorg je ervoor dat je bij een wijziging in de datastructuur van een externe service niet de hele applicatie hoeft aan te passen?

class BookingController {
    getBookings() : ResponseEntity<List<BookingDto>>;
    addBooking(booking: BookingDto);
}

class BookingService {
    getAllBookings() : List<BookingDto>;
    saveBooking(booking: BookingDto);
}

interface IServiceFacade<T> {
    getAll() : List<T>;
    save(booking: T);
}

class BookingRepository {
    getAllBookings() : List<BookingDto>;
    saveBooking(booking: BookingDto);
    getBookingById(id: int) : BookingDto;
}


class BookingDto {
    id: int
    name: String
    location: String
}

interface ICrudRepositoryFacade<T, TPK> {
    getAll() : List<T>;
    save(item: T);
    getById(id: TPK) : T;
}

BookingController --> IServiceFacade
BookingService --|> IServiceFacade
BookingService --> BookingRepository

BookingController --> BookingDto
BookingService --> BookingDto
BookingRepository --> BookingDto

BookingRepository --|> ICrudRepositoryFacade

@enduml